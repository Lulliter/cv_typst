---
title: "Luisa M. Mimmi"
author:
  firstname: Luisa M.
  lastname: Mimmi
  address: Cittadina italiana residente a Pavia (PV)
  position: "Economista | Analista di politiche pubbliche | Consulente freelance" # "Economista | Consulente in data science e formazione" #    
  contacts:
    - icon: fa envelope
      text: lmm76@georgetown.edu
      url: "mailto:lmm76@georgetown.edu"
    - icon: assets/icon/phone-solid.svg # need icon file!!??
      text: "+39-348-9528360"
      # url: "tel:+393489528360"
    - icon: assets/icon/link-solid.svg # need icon file!!??
      text: luisamimmi.org
      url: https://luisamimmi.org
    - icon: fa brands linkedin
      text: LinkedIn
      url: https://www.linkedin.com/in/luisa-m-mimmi
    - icon: fa brands github
      text: lulliter
      url: https://github.com/lulliter
    # - icon: fa brands orcid
    #   text: 0000-0002-2244-8282
    #   url: https://orcid.org/0000-0002-2244-8282
    # - icon: fa brands x-twitter
    #   text: Lulliter
    #   url: https://x.com/Lulliter
    - icon: assets/icon/fa-google-scholar.svg
      text: Luisa M. Mimmi
      url: https://scholar.google.com/citations?user=OBYla5gAAAAJ&hl=en&oi=ao
    # - icon: fa brands researchgate
    #   text: Luisa M. Mimmi
    #   url: https://www.researchgate.net/profile/Luisa-Mimmi
profile-photo: "" # assets/img/profile.jpg
profile-photo-width: 3cm
profile-photo-height: 3cm

style:
  color-accent: 7c1c2d #004B72 #516db0
format:
  awesomecv-typst:
    font-paths: ["assets/fonts/"]
    keep-typ: false
execute: 
  echo: false
  warning: false
---

```{r}
#| output: false

# fonte 
# pckg https://kazuyanagimoto.com/typstcv/
# EXE https://kazuyanagimoto.com/cv/cv.pdf
# GH https://github.com/kazuyanagimoto/cv

# install.packages("typstcv", repos = "https://kazuyanagimoto.r-universe.dev")
library(typstcv)
library(dplyr)
library(stringr)
library(lubridate)
library(RefManageR)
library(glue)

# Set locale to Italian function before calling base::format().
original_locale <- Sys.getlocale("LC_TIME")  # Save the original locale
Sys.setlocale("LC_TIME", "it_IT")  # Set locale to Italian
```



```{r func_date}
#| output: false

# --------- FUNCTION Define the function to process date columns
f_m_y_dates <- function(df, start_year_col, start_month_col, end_year_col, end_month_col) {
	
	df %>%
		# Combine month and year into a date, assuming the first day of the month
		mutate(
			# !!sym() converts the column names (passed as strings) to symbols, allowing them to be used dynamically inside mutate().
			start_m_y = lubridate::make_date(!!sym(start_year_col), !!sym(start_month_col), 1),
			end_m_y = lubridate::make_date(!!sym(end_year_col), !!sym(end_month_col), 1) 
		) %>%
		
		# If NA in end_m_y, set the end date to today
		mutate(end_m_y = if_else(is.na(end_m_y), lubridate::today(), end_m_y)) %>%
		
		# Format the date as "month-year"
		mutate(
			start_m_y = base::format(start_m_y, "%b-%Y"),
			end_m_y = base::format(end_m_y, "%b-%Y")
		) %>%
		
		# Create a resume entry as "month-year - month-year"
		mutate(date = glue::glue("{start_m_y} - {end_m_y}"))
}

# ------- FUNCTION usage
# Apply the function to your dataframe
# processed_df <- f_m_y_dates(df, "start_year", "start_month", "end_year", "end_month")

```


```{r func_date_day}
#| output: false

# --------- FUNCTION: Process date columns including day, month, and year
f_full_dates <- function(df, 
                         start_year_col, start_month_col, start_day_col, 
                         end_year_col, end_month_col, end_day_col) {
  
  df %>%
    mutate(
      # Convert all to numeric safely (handles "NA", "", etc.)
      start_y = as.numeric(.data[[start_year_col]]),
      start_m = as.numeric(.data[[start_month_col]]),
      start_d = as.numeric(.data[[start_day_col]]),
      end_y   = as.numeric(.data[[end_year_col]]),
      end_m   = as.numeric(.data[[end_month_col]]),
      end_d   = as.numeric(.data[[end_day_col]])
    ) %>%
    mutate(
      start_date = dplyr::if_else(
        !is.na(start_y) & !is.na(start_m) & !is.na(start_d),
        lubridate::make_date(start_y, start_m, start_d),
        as.Date(NA)
      ),
      end_date = dplyr::if_else(
        !is.na(end_y) & !is.na(end_m) & !is.na(end_d),
        lubridate::make_date(end_y, end_m, end_d),
        as.Date(NA)
      ),
      end_date = if_else(is.na(end_date), lubridate::today(), end_date)
    ) %>%
    mutate(
      start_str = format(start_date, "%d/%m/%Y"),
      end_str   = format(end_date, "%d/%m/%Y"),
      date = glue::glue("{start_str} – {end_str}")
    ) %>%
    select(-start_y, -start_m, -start_d, -end_y, -end_m, -end_d)
}

# ------- FUNCTION usage
# processed_df <- f_full_dates(df, 
#                              "start_year", "start_month", "start_day", 
#                              "end_year", "end_month", "end_day")

```


```{=typst}
#box(height: 1%) // #box(height: 60pt)
```

## Pubblicazioni allegate in originale o in copia conforme

```{=typst}
#box(height: 2%) // #box(height: 60pt)
```

### Pubblicazioni sottoposte a revisione paritaria 

```{r}
# Retrieve .bib and transform it into a data frame
peer_pub_temp <- RefManageR::ReadBib(
	file = here::here("data", "Lula-MyPublication-Narrow.bib"),
	.Encoding ="UTF-8")  %>%
	base::as.data.frame() %>%
	# filter articles 
	dplyr::filter(bibtype == "Article") # %>% 
	#mutate(url = if_else(is.na(url), url_preprint, url) )

# Clean the date column and format it as "month-year"
peer_pub <- peer_pub_temp %>% 
	mutate(parsed_date = case_when(
		is.na(date) | date == "" ~ NA_Date_,  # Handle NA and empty strings
		nchar(date) == 7 ~ ym(date),# For "yyyy-mm" format
		nchar(date) == 10 ~ ymd(date),# For "yyyy-mm-dd" format
		TRUE ~ NA_Date_))  %>% 
	dplyr::arrange(desc(parsed_date)) %>%
	# Format the parsed date as "month-year"
	mutate(month_year = if_else(is.na(parsed_date), NA_character_, base::format(parsed_date, "%b-%Y")))  %>% 
	# Apply the function to clean the "{{" and "}}" symbols from "title" and "author" columns
	mutate(clean_title = gsub("\\{\\{", "", title),  # Remove "{{"
			 clean_title = gsub("\\}\\}", "", clean_title))  # Remove "}}"

```


```{r}
#| eval: false
#| echo: false
#| output: asis
peer_pub |>
	resume_entry(title = "clean_title",
					 description = "author",
					 location = "journaltitle",
					 date =  "month_year" ,
					 details = "url")
```

```{r}
#| output: asis
#| 
peer_pub %>%
	# reverse chron order 
	dplyr::arrange(parsed_date) %>%
	mutate(
		citation_entry = glue::glue(
			"- <span style='color:#7c1c2d'>{author}</span>. *{clean_title}*. **{journaltitle}** ({month_year}) [{url}]({url})"
		)
	) %>%
	pull(citation_entry) %>%
	cat(sep = "\n\n")
```

```{=typst}
#box(height: 1%) // #box(height: 60pt)
```


### Altre pubblicazioni edite a stampa
```{r}
# Retrieve .bib and transform it into a data frame
othr_pub_temp <- RefManageR::ReadBib(
	file = here::here("data", "Lula-MyPublication-Narrow.bib"),
	.Encoding ="UTF-8")  %>%
	base::as.data.frame() %>%
	# filter articles 
	dplyr::filter(bibtype != "Article") |> # sopra
	dplyr::filter(type != "Personal Blog") |> 
	dplyr::filter(type != "Background Paper") |> 
	dplyr::filter(type != "Working Paper") |> 
	dplyr::filter(type != "Working-paper") 
	


#mutate(url = if_else(is.na(url), url_preprint, url) )

# Clean the date column and format it as "month-year"
othr_pub <- othr_pub_temp %>% 
	mutate(parsed_date = case_when(
		is.na(date) | date == "" ~ NA_Date_,  # Handle NA and empty strings
		nchar(date) == 7 ~ ym(date),# For "yyyy-mm" format
		nchar(date) == 10 ~ ymd(date),# For "yyyy-mm-dd" format
		TRUE ~ NA_Date_))  %>% 
	dplyr::arrange(desc(parsed_date)) %>%
	# Format the parsed date as "month-year"
	mutate(month_year = if_else(is.na(parsed_date), NA_character_, base::format(parsed_date, "%b-%Y")))  %>% 
	# Apply the function to clean the "{{" and "}}" symbols from "title" and "author" columns
	mutate(clean_title = gsub("\\{\\{", "", title),  # Remove "{{"
         clean_title = gsub("\\}\\}", "", clean_title))  # Remove "}}"

```

```{r}
#| output: asis
#| 
othr_pub %>%
	# reverse chron order 
	dplyr::arrange(parsed_date) %>%
	
	mutate(
		citation_entry = glue::glue(
			"- <span style='color:#7c1c2d'>{author}</span>. *{clean_title}*. **({type})** ({month_year}) [{url}]({url})"
		)
	) %>%
	pull(citation_entry) %>%
	cat(sep = "\n\n")
```


<!-- ### Media Divulgativi -->
<!-- ```{r} -->
<!-- # filter blogs -->
<!-- lula_blog <- RefManageR::ReadBib( -->
<!--   file = here::here("data", "Lula-MyPublication-Narrow.bib"), -->
<!--   .Encoding ="UTF-8")  %>% -->
<!--   as.data.frame() %>% -->
<!--   dplyr::filter(bibtype  == "Online") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| output: asis -->
<!-- lula_blog |> -->
<!-- 	resume_entry(title = "title", -->
<!-- 					 location = "type", -->
<!-- 					 description = "author", -->
<!-- 					 date = "date", -->
<!-- 					 details = "url") -->
<!-- ``` -->

<!-- <br><br> -->

<!-- ## Altre pubblicazioni di carattere tecnico e/o divulgativo   -->

<!-- Lista completa accessibile dal [**Profilo Google Scholar**](https://scholar.google.com/citations?user=OBYla5gAAAAJ&hl=en&oi=ao) -->




<!-- ### Autorizzazione al trattamento dei dati personali <br>   -->

<!-- Autorizzo il trattamento dei miei dati personali ai sensi del D.Lgs. 196/2003, come modificato dal D.Lgs. 101/2018, e del Regolamento UE 2016/679 (GDPR), per le finalità connesse alla presente procedura di selezione. -->

<!-- ### Dichiarazione sostitutiva ai sensi di legge <br>   -->

<!-- La sottoscritta, ai sensi degli artt. 46 e 47 del D.P.R. 28 dicembre 2000, n. 445 e s.m.i., dichiara che quanto sopra riportato corrisponde a verità, assumendosi ogni responsabilità in merito alle dichiarazioni rese. -->


```{=typst}
#box(height: 2%) // #box(height: 60pt)
```

```{r}
#| output: true
#| echo: FALSE
#| out.width: 1.5in
#| fig-align: "center"

knitr::include_graphics("assets/img/firma.png")
```

<div style="text-align: center; margin-top: 0.5em;"> 
**Luogo e data**: Pavia, 06 Maggio, 2025 ______ **Firma** (Luisa M. Mimmi)
<br>
</div> 



<!-- quarto  typst-->
<!-- ::: {.block fill=luma(221) inset="8pt" radius="4pt"} -->
<!-- <!-- raw  typst block -->  
<!-- ```{=typst}  -->
<!-- #set text(size: 8pt, weight: "medium", fill: rgb("#85144b")) -->

<!-- Autorizzo il trattamento dei miei dati personali ai sensi del Decreto Legislativo 101/2018, n. 196 e del GDPR (Regolamento UE 2016/679) -->
<!-- ``` -->
<!-- ::: -->



<!-- ![](assets/img/firma.png){fig-align="center" width=20%}\ -->

 
<!-- \vspace*{\fill} -->
<!-- \footnotesize \textcolor{magenta}{Autorizzo il trattamento dei miei dati personali ai sensi del Decreto Legislativo 30 giugno 2003, n. 196 e del GDPR (Regolamento UE 2016/679).}  -->

<!-- <span style="color: red;">Questo è un testo rosso</span> -->


<!-- #color(blue, [Questo testo dovrebbe essere blu in Typst.]) -->

<!-- <span style="color: red;">Questo testo dovrebbe essere rosso in HTML.</span> -->
```{r}
#| output: false
Sys.setlocale("LC_TIME", original_locale)
```

