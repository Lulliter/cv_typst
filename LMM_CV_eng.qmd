---
title: "Luisa M. Mimmi"
author:
  firstname: Luisa M.
  lastname: Mimmi
  address: "Italian citizen | Green card holder"
  position: "Economist | Policy Analyst | Freelance consultant"
  contacts:
    - icon: fa envelope
      text: lmm76@georgetown.edu
      url: "mailto:lmm76@georgetown.edu"
    - icon: assets/icon/phone-solid.svg # need icon file!!??
      text: "+39-348-9528360"
      # url: "tel:+393489528360"
    - icon: assets/icon/bi-house-fill.svg # need icon file!!??
      text: luisamimmi.org
      url: https://luisamimmi.org
    - icon: fa brands linkedin
      text: Luisa M. Mimmi
      url: https://www.linkedin.com/in/luisa-m-mimmi
    - icon: fa brands github
      text: lulliter
      url: https://github.com/lulliter
    # - icon: fa brands orcid
    #   text: 0000-0002-2244-8282
    #   url: https://orcid.org/0000-0002-2244-8282
    # - icon: fa brands x-twitter
    #   text: Lulliter
    #   url: https://x.com/Lulliter
    # - icon: assets/icon/fa-google-scholar.svg
    #   text: Luisa M. Mimmi
    #   url: https://scholar.google.com/citations?user=OBYla5gAAAAJ&hl=en&oi=ao
    # - icon: fa brands researchgate
    #   text: Luisa M. Mimmi
    #   url: https://www.researchgate.net/profile/Luisa-Mimmi
profile-photo: assets/img/profile.jpg
profile-photo-width: 3cm
profile-photo-height: 3cm
style:
  color-accent: 7c1c2d #004B72 #516db0
format:
  awesomecv-typst:
    font-paths: ["assets/fonts/"]
    keep-typ: false
execute: 
  echo: false
  warning: false
---

```{r}
# fonte 
# pckg https://kazuyanagimoto.com/typstcv/
# EXE https://kazuyanagimoto.com/cv/cv.pdf
# GH https://github.com/kazuyanagimoto/cv

# install.packages("typstcv", repos = "https://kazuyanagimoto.r-universe.dev")
library(typstcv)
library(dplyr)
library(stringr)
library(lubridate)
```

```{r func_date}
#| output: false

# Check locale for base::format().
Sys.getlocale("LC_TIME")

# --------- FUNCTION Define the function to process date columns
f_m_y_dates <- function(df, start_year_col, start_month_col, end_year_col, end_month_col) {
	
	df %>%
		# Combine month and year into a date, assuming the first day of the month
		mutate(
			# !!sym() converts the column names (passed as strings) to symbols, allowing them to be used dynamically inside mutate().
			start_m_y = lubridate::make_date(!!sym(start_year_col), !!sym(start_month_col), 1),
			end_m_y = lubridate::make_date(!!sym(end_year_col), !!sym(end_month_col), 1) 
		) %>%
		
		# If NA in end_m_y, set the end date to today
		mutate(end_m_y = if_else(is.na(end_m_y), lubridate::today(), end_m_y)) %>%
		
		# Format the date as "month-year"
		mutate(
			start_m_y = base::format(start_m_y, "%b-%Y"),
			end_m_y = base::format(end_m_y, "%b-%Y")
		) %>%
		
		# Create a resume entry as "month-year - month-year"
		mutate(date = glue::glue("{start_m_y} - {end_m_y}"))
}

# ------- FUNCTION usage
# Apply the function to your dataframe
# processed_df <- f_m_y_dates(df, "start_year", "start_month", "end_year", "end_month")

```

## Work Experience

```{r}
work_temp <- readr::read_csv(here::here("data", "work.csv"), show_col_types = FALSE)

# call function to process dates
work <- work_temp %>% 
	f_m_y_dates("start_year", "start_month", "end_year", "end_month")
```

```{r}
#| output: asis
work %>% 
	#typstcv::format_date(start_m_y_end_m_y, replace_na = "Present" ) %>% 
	#format_date(replace_na = , end = "end", sort_by = "start")  %>% 
	resume_entry(title = "title",
					 description = "org",
					 location = "where",
					 date = "date",
					 details = c("description_1" )
					 #details = c("description_1", "description_2" )
					 ) 
	
```
## Education

```{r}
educ_temp <- readr::read_csv(here::here("data", "edu.csv"), show_col_types = FALSE)
```

```{r}
#| output: asis
educ <- educ_temp %>% 
	f_m_y_dates("start_year", "start_month", "end_year", "end_month") %>% 
	resume_entry(title = "degree",
					 location = "inst",
					 date = "end_m_y",
					 description = "detail")
```

\newpage

<!-- ## Professional Skills -->

<!--  •	Strong critical thinking and **data analysis skills**, showcased in international contexts and across diverse sectors   -->
<!--  •	Demonstrated drive and resourcefulness in **leadership roles** for complex projects with multiple stakeholders   -->
<!--  •	Effective **communication skills**, proven by record of multilingual publications and public speaking for diverse audiences   -->
 

## Skills

```{r}
#| output: asis
read.csv("data/skill.csv") |>
  resume_entry(title = "area",
               description = "skills")
```



## Peer-reviewed Publications

<!-- ### Peer-reviewed   -->

```{r}
# Retrieve .bib and transform it into a data frame
peer_pub_temp <- RefManageR::ReadBib(
	file = here::here("data", "Lula-MyPublication-Narrow.bib"),
	.Encoding ="UTF-8")  %>%
	base::as.data.frame() %>%
	# filter articles 
	dplyr::filter(bibtype == "Article") # %>% 
	#mutate(url = if_else(is.na(url), url_preprint, url) )

# Clean the date column and format it as "month-year"
peer_pub <- peer_pub_temp %>% 
	mutate(parsed_date = case_when(
		is.na(date) | date == "" ~ NA_Date_,  # Handle NA and empty strings
		nchar(date) == 7 ~ ym(date),# For "yyyy-mm" format
		nchar(date) == 10 ~ ymd(date),# For "yyyy-mm-dd" format
		TRUE ~ NA_Date_))  %>% 
	dplyr::arrange(desc(parsed_date)) %>%
	# Format the parsed date as "month-year"
	mutate(month_year = if_else(is.na(parsed_date), NA_character_, base::format(parsed_date, "%b-%Y")))  %>% 
	# Apply the function to clean the "{{" and "}}" symbols from "title" and "author" columns
	mutate(clean_title = gsub("\\{\\{", "", title),  # Remove "{{"
         clean_title = gsub("\\}\\}", "", clean_title))  # Remove "}}"

```


```{r}
#| output: asis
peer_pub |>
	resume_entry(title = "clean_title",
					 description = "author",
					 location = "journaltitle",
					 date =  "month_year" ,
					 details = "url")
```


## Other Publications  
<br><br>

See complete list on  [**Google Scholar profile**](https://scholar.google.com/citations?user=OBYla5gAAAAJ&hl=en&oi=ao)

 
<!-- ### Blog posts -->
<!-- ```{r} -->
<!-- # filter blogs -->
<!-- lula_blog <- RefManageR::ReadBib( -->
<!--   file = here::here("data", "Lula-MyPublication-Narrow.bib"), -->
<!--   .Encoding ="UTF-8")  %>% -->
<!--   as.data.frame() %>% -->
<!--   dplyr::filter(bibtype  == "Online")  %>%  -->
<!-- 	# Apply the function to clean the "{{" and "}}" symbols from "title" and "author" columns -->
<!-- 	mutate(clean_title = gsub("\\{\\{", "", title),  # Remove "{{" -->
<!--          clean_title = gsub("\\}\\}", "", clean_title))  # Remove "}}" -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| output: asis -->
<!-- lula_blog |> -->
<!-- 	resume_entry(title = "clean_title", -->
<!-- 					 location = "type", -->
<!-- 					 description = "author", -->
<!-- 					 date = "date", -->
<!-- 					 details = "url") -->
<!-- ``` -->


## Conferences and Talks

```{r}
# filter recent and....
talks_temp <- RefManageR::ReadBib(
	file = here::here("data", "Lula-MyTalks.bib"),
	.Encoding ="UTF-8")  %>%
	as.data.frame() %>% 
	# Keep only portion of string before "/" in the "date" column [2018-09-05/2018-09-06]
	mutate(date = stringr::str_extract(date, pattern = "^[^/]+")) %>% 
	# Clean the date column and format it as "month-year"
	mutate(parsed_date = case_when(
		is.na(date) | date == "" ~ NA_Date_,  # Handle NA and empty strings
		nchar(date) == 7 ~ ym(date),# For "yyyy-mm" format
		nchar(date) == 10 ~ ymd(date),# For "yyyy-mm-dd" format
		TRUE ~ NA_Date_))  %>% 
	relocate(parsed_date, .after = date) %>%
	dplyr::arrange(desc(parsed_date)) %>%
	# Format the parsed date as "month-year"
	mutate(month_year = if_else(is.na(parsed_date), NA_character_, base::format(parsed_date, "%b-%Y"))) %>% 
	relocate(month_year, .after = date) %>% 
	mutate(year = stringr::str_extract(date,pattern = "^.{1,4}"))  


# filter 2020 and after & use `month_year` for date
talks <- talks_temp %>%
	dplyr::filter(year >2020 & type != "Invited Talk")  %>%
#mutate(url = if_else(is.na(url), url_preprint, url) ) %>%
	# Apply the function to clean the "{{" and "}}" symbols from "title" and "author" columns
	mutate(clean_title = gsub("\\{\\{", "", title),  # Remove "{{"
			 clean_title = gsub("\\}\\}", "", clean_title),  # Remove "}}"
			 clean_eventtitle = gsub("\\{\\{", "", eventtitle),  # Remove "{{"
			 clean_eventtitle = gsub("\\}\\}", "", clean_eventtitle)   # Remove "}}"
	)
```

```{r}
#| output: asis

talks %>%
	resume_entry(title = "clean_title",
					 date = "month_year",
					 description = "clean_eventtitle",
					 location = "venue")
```
